POS = {'--000---11', '---110-000', '1-11-0-10-', '000001----', '--000-1--1', '--0--1--11', '0-0-011---', '0-0-0-1-1-', '11---000-0', '----0111--', '00000-1---', '0--00-11--', '--0---11-1', '0----1-1-1', '---110000-', '---001---1', '1-1-1-0-00', '-----11-10', '0-----11-1', '000---11--', '--0--111--', '---0---111', '-000-11--1', '--11--0000', '--1111--10', '1--1-0-000', '000--1-1--', '--1-1000-0', '1---10-000', '-00----11-', '---11000-0', '0-00----11', '---0-1--11', '1--1101--1', '0-0-0-1--1', '--111000--', '--1-1-0000', '1---1-0000', '-1-1--0000', '1--11--110', '11---0-000', '1-1--0-000', '----100000', '--1-100-00', '-1-1-0000-', '--000--1-1', '-0---0-111', '1---10000-', '--111-0-01', '0--00-1--1', '11--101--1', '---1-00000', '1-1---000-', '--0001--1-', '-00-0-1-1-', '1--1-0000-', '111---11-0', '------1110', '0----111--', '0--001-1--', '11--111--0', '1-1-100--1', '111--1-0-1', '-1-1-00-00', '-000-1--1-', '-1--10-000', '01-111---1', '11-1-011--', '----011--1', '0----11--1', '110-1-11--', '-1-1-000-0', '-00-01--1-', '000----1-1', '0-00--1--1', '1-1--000-0', '--11-000-0', '0-00-1---1', '--11-00-00', '1--1111--0', '0-00---1-1', '0-0-0-11--', '--0001-1--', '-111---101', '-00-0---11', '00000---1-', '00--0-11--', '-111---011', '00--0-1-1-', '1--11-000-', '-000----11', '----01--11', '0-00-1-1--', '0-00-11---', '1-1-10--00', '--00011---', '-0---111-1', '000-01---1', '00-00----1', '1-1-1--000', '-11--00--0', '1-11---011', '0--00--11-', '-1--1000-0', '1--1--0000', '--0----111', '-----01-11', '0-00-1--1-', '-000--1-1-', '--1-10-000', '--1--0000-', '1-1-10-0-1', '--0--1-1-1', '0--001--1-', '0--00-1-1-', '---11-0000', '00--0-1--1', '11---10--1', '-----1-110', '0--0011---', '1----00-00', '-0000--1--', '-1111--01-', '00--011---', '1-11-1-1-0', '-1---00000', '-111-0-000', '----0-11-1', '-1--100-00'}
class sbox_cnf:
	def __init__(self): 
		self.pos = POS
	def SboxSize(self):
		"""
		This function returns size of the sbox
		size = n mean sbox is a map from F_2^n to F_2^n
		"""
		l = format(len(self.sbox),"b")
		return (len(l) - 1)	
	def get_sbox_constraints(self,X,Y):
		POS = self.pos
		fun = [ ]
		for maxterm in POS:
			temp = [ ]
			for i in range(5):
				if(maxterm[i] == '1'):
					temp.append ('('+'~'+X[i]+')')
				elif(maxterm[i] == '0'):
					temp.append (X[i])
			for i in range(5,10):
				if(maxterm[i] == '1'):
					temp.append ('('+'~ '+Y[i-5]+')')
				elif(maxterm[i] == '0'):
					temp.append (Y[i-5])
			fun.append('('+"|".join(temp)+')')
		sbox_main ='ASSERT ' + '&'.join(fun)+'=0bin1'+';'
		return (sbox_main)
if __name__ == '__main__':
	sbox_list = [0x4,0xb,0x1f,0x14,0x1a,0x15,0x9,0x2,0x1b,0x5,0x8,0x12,\
				0x1d,0x3,0x6,0x1c,0x1e,0x13,0x7,0xe,0x0,0xd,0x11,0x18,0x10,\
				0xc,0x1,0x19,0x16,0xa,0xf,0x17]
	print (sbox_list)
	sbox_cnf_object = sbox_cnf()
	variables_X = []
	variables_Y = []
	for i in range(5):
		variables_X.append('%s_%d_%d_%d'%('X', 0, 1, i))
		variables_Y.append('%s_%d_%d_%d'%('Y', 0, 1, i))
	POS = sbox_cnf_object.pos
	print (POS)
	s = sbox_cnf_object.get_sbox_constraints(variables_X, variables_Y)
	print (s)
